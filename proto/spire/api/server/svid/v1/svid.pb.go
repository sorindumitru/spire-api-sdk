// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: spire/api/server/svid/v1/svid.proto

package svidv1

import (
	types "github.com/spiffe/spire-api-sdk/proto/spire/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MintX509SVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. ASN.1 DER encoded CSR. The CSR is used to convey the public
	// key and the SPIFFE ID (via the URI SAN). Only one URI SAN can be set.
	// Optionally, the subject and any number of DNS SANs can also be set.
	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	// The desired TTL of the X509-SVID, in seconds. The server default will be
	// used if unset. The TTL is advisory only. The actual lifetime of the
	// X509-SVID may be lower depending on the remaining lifetime of the active
	// SPIRE Server CA.
	Ttl int32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *MintX509SVIDRequest) Reset() {
	*x = MintX509SVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintX509SVIDRequest) ProtoMessage() {}

func (x *MintX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*MintX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{0}
}

func (x *MintX509SVIDRequest) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

func (x *MintX509SVIDRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type MintX509SVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly issued X509-SVID.
	Svid *types.X509SVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
}

func (x *MintX509SVIDResponse) Reset() {
	*x = MintX509SVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintX509SVIDResponse) ProtoMessage() {}

func (x *MintX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*MintX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{1}
}

func (x *MintX509SVIDResponse) GetSvid() *types.X509SVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type MintJWTSVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. SPIFFE ID of the JWT-SVID.
	Id *types.SPIFFEID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. List of audience claims to include in the JWT-SVID. At least one must
	// be set.
	Audience []string `protobuf:"bytes,2,rep,name=audience,proto3" json:"audience,omitempty"`
	// Desired TTL of the JWT-SVID, in seconds. The server default will be used
	// if unset. The TTL is advisory only. The actual lifetime of the JWT-SVID
	// may be lower depending on the remaining lifetime of the active SPIRE
	// Server CA.
	Ttl int32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *MintJWTSVIDRequest) Reset() {
	*x = MintJWTSVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintJWTSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintJWTSVIDRequest) ProtoMessage() {}

func (x *MintJWTSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintJWTSVIDRequest.ProtoReflect.Descriptor instead.
func (*MintJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{2}
}

func (x *MintJWTSVIDRequest) GetId() *types.SPIFFEID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MintJWTSVIDRequest) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *MintJWTSVIDRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type MintJWTSVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly issued JWT-SVID.
	Svid *types.JWTSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
}

func (x *MintJWTSVIDResponse) Reset() {
	*x = MintJWTSVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintJWTSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintJWTSVIDResponse) ProtoMessage() {}

func (x *MintJWTSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintJWTSVIDResponse.ProtoReflect.Descriptor instead.
func (*MintJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{3}
}

func (x *MintJWTSVIDResponse) GetSvid() *types.JWTSVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type MintWITSVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. SPIFFE ID of the JWT-SVID.
	Id *types.SPIFFEID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. Public key for the cnf claim.
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Desired TTL of the JWT-SVID, in seconds. The server default will be used
	// if unset. The TTL is advisory only. The actual lifetime of the JWT-SVID
	// may be lower depending on the remaining lifetime of the active SPIRE
	// Server CA.
	Ttl int32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *MintWITSVIDRequest) Reset() {
	*x = MintWITSVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintWITSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintWITSVIDRequest) ProtoMessage() {}

func (x *MintWITSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintWITSVIDRequest.ProtoReflect.Descriptor instead.
func (*MintWITSVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{4}
}

func (x *MintWITSVIDRequest) GetId() *types.SPIFFEID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MintWITSVIDRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *MintWITSVIDRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type MintWITSVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly issued WIT-SVID.
	Svid *types.WITSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
}

func (x *MintWITSVIDResponse) Reset() {
	*x = MintWITSVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintWITSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintWITSVIDResponse) ProtoMessage() {}

func (x *MintWITSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintWITSVIDResponse.ProtoReflect.Descriptor instead.
func (*MintWITSVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{5}
}

func (x *MintWITSVIDResponse) GetSvid() *types.WITSVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type BatchNewX509SVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. One or more X509-SVID parameters for X509-SVID entries to
	// be signed.
	Params []*NewX509SVIDParams `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *BatchNewX509SVIDRequest) Reset() {
	*x = BatchNewX509SVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNewX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNewX509SVIDRequest) ProtoMessage() {}

func (x *BatchNewX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNewX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*BatchNewX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{6}
}

func (x *BatchNewX509SVIDRequest) GetParams() []*NewX509SVIDParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type BatchNewX509SVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result for each X509-SVID requested (order is maintained).
	Results []*BatchNewX509SVIDResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchNewX509SVIDResponse) Reset() {
	*x = BatchNewX509SVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNewX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNewX509SVIDResponse) ProtoMessage() {}

func (x *BatchNewX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNewX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*BatchNewX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{7}
}

func (x *BatchNewX509SVIDResponse) GetResults() []*BatchNewX509SVIDResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchNewWITSVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. One or more X509-SVID parameters for X509-SVID entries to
	// be signed.
	Params []*NewWITSVIDParams `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *BatchNewWITSVIDRequest) Reset() {
	*x = BatchNewWITSVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNewWITSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNewWITSVIDRequest) ProtoMessage() {}

func (x *BatchNewWITSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNewWITSVIDRequest.ProtoReflect.Descriptor instead.
func (*BatchNewWITSVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{8}
}

func (x *BatchNewWITSVIDRequest) GetParams() []*NewWITSVIDParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type BatchNewWITSVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result for each X509-SVID requested (order is maintained).
	Results []*BatchNewWITSVIDResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchNewWITSVIDResponse) Reset() {
	*x = BatchNewWITSVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNewWITSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNewWITSVIDResponse) ProtoMessage() {}

func (x *BatchNewWITSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNewWITSVIDResponse.ProtoReflect.Descriptor instead.
func (*BatchNewWITSVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{9}
}

func (x *BatchNewWITSVIDResponse) GetResults() []*BatchNewWITSVIDResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type NewJWTSVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The entry ID of the identity being requested.
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Required. List of audience claims to include in the JWT-SVID. At least
	// one must be set.
	Audience []string `protobuf:"bytes,2,rep,name=audience,proto3" json:"audience,omitempty"`
}

func (x *NewJWTSVIDRequest) Reset() {
	*x = NewJWTSVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewJWTSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewJWTSVIDRequest) ProtoMessage() {}

func (x *NewJWTSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewJWTSVIDRequest.ProtoReflect.Descriptor instead.
func (*NewJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{10}
}

func (x *NewJWTSVIDRequest) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *NewJWTSVIDRequest) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

type NewJWTSVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The newly issued JWT-SVID
	Svid *types.JWTSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
}

func (x *NewJWTSVIDResponse) Reset() {
	*x = NewJWTSVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewJWTSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewJWTSVIDResponse) ProtoMessage() {}

func (x *NewJWTSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewJWTSVIDResponse.ProtoReflect.Descriptor instead.
func (*NewJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{11}
}

func (x *NewJWTSVIDResponse) GetSvid() *types.JWTSVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type NewDownstreamX509CARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The ASN.1 DER encoded Certificate Signing Request (CSR). The
	// CSR is only used to convey the public key; other fields in the CSR are
	// ignored. The X509-SVID attributes are determined by the downstream entry.
	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	// Optional. The TTL preferred by the downstream SPIRE Server for the
	// signed intermediate CA. If zero, the upstream SPIRE Server will use its
	// own default.
	PreferredTtl int32 `protobuf:"varint,2,opt,name=preferred_ttl,json=preferredTtl,proto3" json:"preferred_ttl,omitempty"`
}

func (x *NewDownstreamX509CARequest) Reset() {
	*x = NewDownstreamX509CARequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDownstreamX509CARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDownstreamX509CARequest) ProtoMessage() {}

func (x *NewDownstreamX509CARequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDownstreamX509CARequest.ProtoReflect.Descriptor instead.
func (*NewDownstreamX509CARequest) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{12}
}

func (x *NewDownstreamX509CARequest) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

func (x *NewDownstreamX509CARequest) GetPreferredTtl() int32 {
	if x != nil {
		return x.PreferredTtl
	}
	return 0
}

type NewDownstreamX509CAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CA certificate and any intermediates required to form a chain of trust
	// back to the X.509 authorities (DER encoded). The CA certificate is the
	// first.
	CaCertChain [][]byte `protobuf:"bytes,1,rep,name=ca_cert_chain,json=caCertChain,proto3" json:"ca_cert_chain,omitempty"`
	// X.509 authorities (DER encoded).
	X509Authorities [][]byte `protobuf:"bytes,2,rep,name=x509_authorities,json=x509Authorities,proto3" json:"x509_authorities,omitempty"`
}

func (x *NewDownstreamX509CAResponse) Reset() {
	*x = NewDownstreamX509CAResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDownstreamX509CAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDownstreamX509CAResponse) ProtoMessage() {}

func (x *NewDownstreamX509CAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDownstreamX509CAResponse.ProtoReflect.Descriptor instead.
func (*NewDownstreamX509CAResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{13}
}

func (x *NewDownstreamX509CAResponse) GetCaCertChain() [][]byte {
	if x != nil {
		return x.CaCertChain
	}
	return nil
}

func (x *NewDownstreamX509CAResponse) GetX509Authorities() [][]byte {
	if x != nil {
		return x.X509Authorities
	}
	return nil
}

type NewX509SVIDParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The entry ID for the identity being requested.
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Required. The ASN.1 DER encoded Certificate Signing Request (CSR). The
	// CSR is only used to convey the public key; other fields in the CSR are
	// ignored. The X509-SVID attributes are determined by the entry.
	Csr []byte `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (x *NewX509SVIDParams) Reset() {
	*x = NewX509SVIDParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewX509SVIDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewX509SVIDParams) ProtoMessage() {}

func (x *NewX509SVIDParams) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewX509SVIDParams.ProtoReflect.Descriptor instead.
func (*NewX509SVIDParams) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{14}
}

func (x *NewX509SVIDParams) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *NewX509SVIDParams) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

type NewWITSVIDParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The entry ID for the identity being requested.
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Required. The ASN.1 DER encoded Certificate Signing Request (CSR). The
	// CSR is only used to convey the public key; other fields in the CSR are
	// ignored. The X509-SVID attributes are determined by the entry.
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *NewWITSVIDParams) Reset() {
	*x = NewWITSVIDParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewWITSVIDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewWITSVIDParams) ProtoMessage() {}

func (x *NewWITSVIDParams) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewWITSVIDParams.ProtoReflect.Descriptor instead.
func (*NewWITSVIDParams) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{15}
}

func (x *NewWITSVIDParams) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *NewWITSVIDParams) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type BatchNewX509SVIDResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of creating the X509-SVID.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The newly created X509-SVID. This will be set if the status is OK.
	Svid *types.X509SVID `protobuf:"bytes,2,opt,name=svid,proto3" json:"svid,omitempty"`
}

func (x *BatchNewX509SVIDResponse_Result) Reset() {
	*x = BatchNewX509SVIDResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNewX509SVIDResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNewX509SVIDResponse_Result) ProtoMessage() {}

func (x *BatchNewX509SVIDResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNewX509SVIDResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchNewX509SVIDResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{7, 0}
}

func (x *BatchNewX509SVIDResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchNewX509SVIDResponse_Result) GetSvid() *types.X509SVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type BatchNewWITSVIDResponse_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of creating the WIT-SVID.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The newly created X509-SVID. This will be set if the status is OK.
	Svid *types.WITSVID `protobuf:"bytes,2,opt,name=svid,proto3" json:"svid,omitempty"`
}

func (x *BatchNewWITSVIDResponse_Result) Reset() {
	*x = BatchNewWITSVIDResponse_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchNewWITSVIDResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchNewWITSVIDResponse_Result) ProtoMessage() {}

func (x *BatchNewWITSVIDResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_server_svid_v1_svid_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchNewWITSVIDResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchNewWITSVIDResponse_Result) Descriptor() ([]byte, []int) {
	return file_spire_api_server_svid_v1_svid_proto_rawDescGZIP(), []int{9, 0}
}

func (x *BatchNewWITSVIDResponse_Result) GetStatus() *types.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BatchNewWITSVIDResponse_Result) GetSvid() *types.WITSVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

var File_spire_api_server_svid_v1_svid_proto protoreflect.FileDescriptor

var file_spire_api_server_svid_v1_svid_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x73, 0x76, 0x69, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x76, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x1a,
	0x1d, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6a, 0x77, 0x74, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x69,
	0x74, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x78, 0x35, 0x30,
	0x39, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x13, 0x4d,
	0x69, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x63, 0x73, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x45, 0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x74, 0x58, 0x35,
	0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x73, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x58,
	0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x04, 0x73, 0x76, 0x69, 0x64, 0x22, 0x6d, 0x0a,
	0x12, 0x4d, 0x69, 0x6e, 0x74, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x43, 0x0a, 0x13,
	0x4d, 0x69, 0x6e, 0x74, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x04, 0x73, 0x76, 0x69,
	0x64, 0x22, 0x70, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x74, 0x57, 0x49, 0x54, 0x53, 0x56, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x50, 0x49, 0x46, 0x46, 0x45, 0x49, 0x44, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x22, 0x43, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x74, 0x57, 0x49, 0x54, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x76,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x49, 0x54, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x04, 0x73, 0x76, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x65, 0x77, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x77, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x65, 0x77, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x68, 0x0a, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x04,
	0x73, 0x76, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77,
	0x57, 0x49, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x57, 0x49, 0x54,
	0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x57,
	0x49, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x65, 0x77, 0x57, 0x49, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x1a, 0x67, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x04, 0x73, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x49,
	0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x04, 0x73, 0x76, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x11, 0x4e,
	0x65, 0x77, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x4a, 0x57,
	0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x73, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4a, 0x57,
	0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x04, 0x73, 0x76, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x1a, 0x4e,
	0x65, 0x77, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x58, 0x35, 0x30, 0x39,
	0x43, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x73, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x74, 0x6c,
	0x22, 0x6c, 0x0a, 0x1b, 0x4e, 0x65, 0x77, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x58, 0x35, 0x30, 0x39, 0x43, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x78, 0x35, 0x30, 0x39, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x78,
	0x35, 0x30, 0x39, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x40,
	0x0a, 0x11, 0x4e, 0x65, 0x77, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x73, 0x72,
	0x22, 0x4c, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x57, 0x49, 0x54, 0x53, 0x56, 0x49, 0x44, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x32, 0xae,
	0x06, 0x0a, 0x04, 0x53, 0x56, 0x49, 0x44, 0x12, 0x6d, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x74, 0x58,
	0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x12, 0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x74, 0x4a, 0x57,
	0x54, 0x53, 0x56, 0x49, 0x44, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x6e, 0x74, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x74, 0x57, 0x49, 0x54, 0x53, 0x56, 0x49,
	0x44, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e,
	0x74, 0x57, 0x49, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x57,
	0x49, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56,
	0x49, 0x44, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0f, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x65, 0x77, 0x57, 0x49, 0x54, 0x53, 0x56, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x77,
	0x57, 0x49, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x65, 0x77, 0x57, 0x49, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x12,
	0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x4a, 0x57,
	0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x4a, 0x57, 0x54, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x4e,
	0x65, 0x77, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x58, 0x35, 0x30, 0x39,
	0x43, 0x41, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x77, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x58, 0x35, 0x30, 0x39, 0x43,
	0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x76, 0x69, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x58, 0x35, 0x30, 0x39, 0x43, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70,
	0x69, 0x66, 0x66, 0x65, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x76, 0x69, 0x64, 0x2f, 0x76,
	0x31, 0x3b, 0x73, 0x76, 0x69, 0x64, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spire_api_server_svid_v1_svid_proto_rawDescOnce sync.Once
	file_spire_api_server_svid_v1_svid_proto_rawDescData = file_spire_api_server_svid_v1_svid_proto_rawDesc
)

func file_spire_api_server_svid_v1_svid_proto_rawDescGZIP() []byte {
	file_spire_api_server_svid_v1_svid_proto_rawDescOnce.Do(func() {
		file_spire_api_server_svid_v1_svid_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_api_server_svid_v1_svid_proto_rawDescData)
	})
	return file_spire_api_server_svid_v1_svid_proto_rawDescData
}

var file_spire_api_server_svid_v1_svid_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_spire_api_server_svid_v1_svid_proto_goTypes = []interface{}{
	(*MintX509SVIDRequest)(nil),             // 0: spire.api.server.svid.v1.MintX509SVIDRequest
	(*MintX509SVIDResponse)(nil),            // 1: spire.api.server.svid.v1.MintX509SVIDResponse
	(*MintJWTSVIDRequest)(nil),              // 2: spire.api.server.svid.v1.MintJWTSVIDRequest
	(*MintJWTSVIDResponse)(nil),             // 3: spire.api.server.svid.v1.MintJWTSVIDResponse
	(*MintWITSVIDRequest)(nil),              // 4: spire.api.server.svid.v1.MintWITSVIDRequest
	(*MintWITSVIDResponse)(nil),             // 5: spire.api.server.svid.v1.MintWITSVIDResponse
	(*BatchNewX509SVIDRequest)(nil),         // 6: spire.api.server.svid.v1.BatchNewX509SVIDRequest
	(*BatchNewX509SVIDResponse)(nil),        // 7: spire.api.server.svid.v1.BatchNewX509SVIDResponse
	(*BatchNewWITSVIDRequest)(nil),          // 8: spire.api.server.svid.v1.BatchNewWITSVIDRequest
	(*BatchNewWITSVIDResponse)(nil),         // 9: spire.api.server.svid.v1.BatchNewWITSVIDResponse
	(*NewJWTSVIDRequest)(nil),               // 10: spire.api.server.svid.v1.NewJWTSVIDRequest
	(*NewJWTSVIDResponse)(nil),              // 11: spire.api.server.svid.v1.NewJWTSVIDResponse
	(*NewDownstreamX509CARequest)(nil),      // 12: spire.api.server.svid.v1.NewDownstreamX509CARequest
	(*NewDownstreamX509CAResponse)(nil),     // 13: spire.api.server.svid.v1.NewDownstreamX509CAResponse
	(*NewX509SVIDParams)(nil),               // 14: spire.api.server.svid.v1.NewX509SVIDParams
	(*NewWITSVIDParams)(nil),                // 15: spire.api.server.svid.v1.NewWITSVIDParams
	(*BatchNewX509SVIDResponse_Result)(nil), // 16: spire.api.server.svid.v1.BatchNewX509SVIDResponse.Result
	(*BatchNewWITSVIDResponse_Result)(nil),  // 17: spire.api.server.svid.v1.BatchNewWITSVIDResponse.Result
	(*types.X509SVID)(nil),                  // 18: spire.api.types.X509SVID
	(*types.SPIFFEID)(nil),                  // 19: spire.api.types.SPIFFEID
	(*types.JWTSVID)(nil),                   // 20: spire.api.types.JWTSVID
	(*types.WITSVID)(nil),                   // 21: spire.api.types.WITSVID
	(*types.Status)(nil),                    // 22: spire.api.types.Status
}
var file_spire_api_server_svid_v1_svid_proto_depIdxs = []int32{
	18, // 0: spire.api.server.svid.v1.MintX509SVIDResponse.svid:type_name -> spire.api.types.X509SVID
	19, // 1: spire.api.server.svid.v1.MintJWTSVIDRequest.id:type_name -> spire.api.types.SPIFFEID
	20, // 2: spire.api.server.svid.v1.MintJWTSVIDResponse.svid:type_name -> spire.api.types.JWTSVID
	19, // 3: spire.api.server.svid.v1.MintWITSVIDRequest.id:type_name -> spire.api.types.SPIFFEID
	21, // 4: spire.api.server.svid.v1.MintWITSVIDResponse.svid:type_name -> spire.api.types.WITSVID
	14, // 5: spire.api.server.svid.v1.BatchNewX509SVIDRequest.params:type_name -> spire.api.server.svid.v1.NewX509SVIDParams
	16, // 6: spire.api.server.svid.v1.BatchNewX509SVIDResponse.results:type_name -> spire.api.server.svid.v1.BatchNewX509SVIDResponse.Result
	15, // 7: spire.api.server.svid.v1.BatchNewWITSVIDRequest.params:type_name -> spire.api.server.svid.v1.NewWITSVIDParams
	17, // 8: spire.api.server.svid.v1.BatchNewWITSVIDResponse.results:type_name -> spire.api.server.svid.v1.BatchNewWITSVIDResponse.Result
	20, // 9: spire.api.server.svid.v1.NewJWTSVIDResponse.svid:type_name -> spire.api.types.JWTSVID
	22, // 10: spire.api.server.svid.v1.BatchNewX509SVIDResponse.Result.status:type_name -> spire.api.types.Status
	18, // 11: spire.api.server.svid.v1.BatchNewX509SVIDResponse.Result.svid:type_name -> spire.api.types.X509SVID
	22, // 12: spire.api.server.svid.v1.BatchNewWITSVIDResponse.Result.status:type_name -> spire.api.types.Status
	21, // 13: spire.api.server.svid.v1.BatchNewWITSVIDResponse.Result.svid:type_name -> spire.api.types.WITSVID
	0,  // 14: spire.api.server.svid.v1.SVID.MintX509SVID:input_type -> spire.api.server.svid.v1.MintX509SVIDRequest
	2,  // 15: spire.api.server.svid.v1.SVID.MintJWTSVID:input_type -> spire.api.server.svid.v1.MintJWTSVIDRequest
	4,  // 16: spire.api.server.svid.v1.SVID.MintWITSVID:input_type -> spire.api.server.svid.v1.MintWITSVIDRequest
	6,  // 17: spire.api.server.svid.v1.SVID.BatchNewX509SVID:input_type -> spire.api.server.svid.v1.BatchNewX509SVIDRequest
	8,  // 18: spire.api.server.svid.v1.SVID.BatchNewWITSVID:input_type -> spire.api.server.svid.v1.BatchNewWITSVIDRequest
	10, // 19: spire.api.server.svid.v1.SVID.NewJWTSVID:input_type -> spire.api.server.svid.v1.NewJWTSVIDRequest
	12, // 20: spire.api.server.svid.v1.SVID.NewDownstreamX509CA:input_type -> spire.api.server.svid.v1.NewDownstreamX509CARequest
	1,  // 21: spire.api.server.svid.v1.SVID.MintX509SVID:output_type -> spire.api.server.svid.v1.MintX509SVIDResponse
	3,  // 22: spire.api.server.svid.v1.SVID.MintJWTSVID:output_type -> spire.api.server.svid.v1.MintJWTSVIDResponse
	5,  // 23: spire.api.server.svid.v1.SVID.MintWITSVID:output_type -> spire.api.server.svid.v1.MintWITSVIDResponse
	7,  // 24: spire.api.server.svid.v1.SVID.BatchNewX509SVID:output_type -> spire.api.server.svid.v1.BatchNewX509SVIDResponse
	9,  // 25: spire.api.server.svid.v1.SVID.BatchNewWITSVID:output_type -> spire.api.server.svid.v1.BatchNewWITSVIDResponse
	11, // 26: spire.api.server.svid.v1.SVID.NewJWTSVID:output_type -> spire.api.server.svid.v1.NewJWTSVIDResponse
	13, // 27: spire.api.server.svid.v1.SVID.NewDownstreamX509CA:output_type -> spire.api.server.svid.v1.NewDownstreamX509CAResponse
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_spire_api_server_svid_v1_svid_proto_init() }
func file_spire_api_server_svid_v1_svid_proto_init() {
	if File_spire_api_server_svid_v1_svid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_api_server_svid_v1_svid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintX509SVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintX509SVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintJWTSVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintJWTSVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintWITSVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintWITSVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNewX509SVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNewX509SVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNewWITSVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNewWITSVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewJWTSVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewJWTSVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDownstreamX509CARequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDownstreamX509CAResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewX509SVIDParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewWITSVIDParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNewX509SVIDResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_server_svid_v1_svid_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchNewWITSVIDResponse_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_api_server_svid_v1_svid_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_api_server_svid_v1_svid_proto_goTypes,
		DependencyIndexes: file_spire_api_server_svid_v1_svid_proto_depIdxs,
		MessageInfos:      file_spire_api_server_svid_v1_svid_proto_msgTypes,
	}.Build()
	File_spire_api_server_svid_v1_svid_proto = out.File
	file_spire_api_server_svid_v1_svid_proto_rawDesc = nil
	file_spire_api_server_svid_v1_svid_proto_goTypes = nil
	file_spire_api_server_svid_v1_svid_proto_depIdxs = nil
}
